#include <iostream>
#include <TFile.h>
#include <TTree.h>
#include <TCanvas.h>
#include <TH1F.h>
#include <TLegend.h>
#include <RooRealVar.h>
#include <RooBreitWigner.h>
#include <RooGaussian.h>
#include <RooFFTConvPdf.h>
#include <RooAddPdf.h>
#include <RooDataHist.h>
#include <RooPlot.h>

using namespace RooFit;

void fit4260()
{
    // 读取ROOT文件
    TFile *file = TFile::Open("data.root");
    TTree *tree = (TTree*)file->Get("fitzcm");

    // 创建RooFit变量
    RooRealVar x("x", "x", 3.8, 4); // 替换min_value和max_value为你的x变量范围

    // 创建RooFit变量用于背景拟合参数
    RooRealVar a("a", "a", 3.85,3.6,4.1);
    RooRealVar b("b", "b", 2,0,4);
    RooRealVar c("c", "c", 2,0,4);
    RooRealVar d("d", "d", 2,0,4);

    // 创建Breit-Wigner模型
    RooRealVar mean("mean", "mean", 0.25,3.6,4.1);
    RooRealVar width("width", "width", 0.2,3.8,4);
    RooBreitWigner bw("bw", "Breit-Wigner", x, mean, width);

    // 创建Gaussian模型
    RooRealVar sigma("sigma", "sigma", 0.1,0.1,1);
    RooGaussian gauss("gauss", "Gaussian", x, mean, sigma);

    // 创建Breit-Wigner卷积Gaussian模型
    RooFFTConvPdf signal("signal", "Signal", x, bw, gauss);

    // 创建背景模型
    RooRealVar bg_x0("bg_x0", "bg_x0", 1,3.6,4.1);
    RooRealVar bg_power("bg_power", "bg_power",1,3.6,4.1);
    RooRealVar bg_c("bg_c", "bg_c", 1,3.6,4.1);
    RooRealVar bg_d("bg_d", "bg_d", 1,3.6,4.1);
    RooGenericPdf background("background", "Background", "a / (x - bg_x0)^b + c + d*x",
                             RooArgSet(x, a, b, c, d, bg_x0, bg_power, bg_c, bg_d));

    // 创建总拟合模型
    RooRealVar signal_fraction("signal_fraction", "signal_fraction",3,0,100);
    RooRealVar background_fraction("background_fraction", "background_fraction",3,0,100);
    RooAddPdf model("model", "Model", RooArgList(signal, background), RooArgList(signal_fraction, background_fraction));

    // 将数据加载到RooDataSet中
    RooDataSet data("data", "Data", RooArgSet(x), Import(*tree));

    // 进行拟合
    model.fitTo(data,Range(3.8,4),Extended(kTRUE));

    // 创建画布和绘图
    TCanvas *canvas = new TCanvas("canvas", "Fit Result", 800, 600);
    RooPlot *frame = x.frame();
    data.plotOn(frame);
    model.plotOn(frame);
    model.plotOn(frame, Components(background), LineStyle(kDashed));

    // 绘制拟合结果
    frame->Draw();
    canvas->SaveAs("fit_result.png");

    // 输出拟合参数
    /*std::cout << "Signal Mean: " << mean.getVal() << std::endl;
    std::cout << "Signal Width: " << width.getVal() << std::endl;
    std::cout << "Signal Fraction: " << signal_fraction.getVal() << std::endl;
    std::cout << "Background Parameters:" << std::endl;
    std::cout << "   a: " << a.getVal() << std::endl;
    std::cout << "   b: " << b.getVal() << std::endl;
    std::cout << "   c: " << c.getVal() << std::endl;
    std::cout << "   d: " << d.getVal() << std::endl;*/

    // 清理资源
    delete canvas;
    delete file;

    return 0;
}
